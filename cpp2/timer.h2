/*
 * =====================================================================================
 *
 *       Filename:  timer.h2
 *
 *    Description:
 *
 *        Version:  1.0
 *        Created:  03/28/24 18:16:08
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  rgc (rgc), sessyargc.jp@gmail.com
 *   Organization:
 *
 * =====================================================================================
 */

chr : namespace == std::chrono;

timer: @struct type = {
        t0_: std::chrono::time_point<std::chrono::high_resolution_clock> =
               std::chrono::high_resolution_clock::now();
        tl_: std::vector<std::pair<std::string,
               std::chrono::time_point<std::chrono::high_resolution_clock>>> = ();

        nt: (inout this) = {
              std::cout << tl_.capacity() << " -> ";
              tl_.reserve(128);
              std::cout << tl_.capacity() << " :\n";
            }

        st: (inout this, move s: std::string) = {
              tl_.push_back(std::make_pair(s, std::chrono::high_resolution_clock::now()));
            }

        pr: (this) = {
              ad: std::vector<double> = ();
              for tl_
              do (in p_)
              {
                d := std::chrono::duration<double, std::micro>(p_.second - t0_);
                std::cout << p_.first << ": " << d.count() << " us\n";
                ad.push_back(d.count());
              }
              std::adjacent_difference(ad.begin(), ad.end(), ad.begin());
              for ad
              do (in p_)
              {
                std::cout << p_ << " us\n";
              }
            }
       }

timer2: @struct type = {
        t0_: std::chrono::time_point<std::chrono::high_resolution_clock> =
               std::chrono::high_resolution_clock::now();
        tl_: std::vector<std::pair<uint64_t,
               std::chrono::time_point<std::chrono::high_resolution_clock>>> = ();

        nt: (inout this) = {
              /* std::cout << tl_.capacity() << " -> "; */
              /* tl_.reserve(128); */
              /* std::cout << tl_.capacity() << " :\n"; */
            }

        rs: (inout this, n: int) = {
              std::cout << tl_.capacity() << " -> ";
              tl_.reserve(n);
              std::cout << tl_.capacity() << " :\n";

              t0_ = std::chrono::high_resolution_clock::now();
            }

        st: (inout this, l: uint64_t) = {
              tl_.push_back(std::make_pair(l, std::chrono::high_resolution_clock::now()));
            }

        dummy0: (this) = {
              ad: std::vector<double> = ();
              for tl_
              do (in p_)
              {
                d := std::chrono::duration<double, std::micro>(p_.second - t0_);
                ad.push_back(d.count());
              }
              std::adjacent_difference(ad.begin(), ad.end(), ad.begin());
            }

        dummy1: (this) = {
              df: double = ();
              for tl_
              do (in p_)
              {
                d := std::chrono::duration<double, std::micro>(p_.second - t0_).count();
                df = d;
              }
            }

        pr0: (this) = {
              ad: std::vector<double> = ();
              for tl_
              do (in p_)
              {
                d := std::chrono::duration<double, std::micro>(p_.second - t0_);
                std::cout << p_.first << ": " << d.count() << " us\n";
                ad.push_back(d.count());
              }
              std::adjacent_difference(ad.begin(), ad.end(), ad.begin());
              for ad
              do (in p_)
              {
                std::cout << p_ << " us\n";
              }
            }

        pr: (this) = {
              df: double = ();
              for tl_
              do (in p_)
              {
                d := std::chrono::duration<double, std::micro>(p_.second - t0_).count();
                std::cout << std::setw(8) << std::setprecision(6) << p_.first << " : (";
                std::cout << std::setw(8) << std::setprecision(6) << d - df << ") us\n";
                df = d;
              }
            }

        pru: (this) = {
              df: double = ();
              for tl_
              do (in p_)
              {
                d := std::chrono::duration<double, std::micro>(p_.second - t0_).count();
                std::cout << std::setw(8) << std::setprecision(6) << p_.first << " : (";
                std::cout << std::setw(8) << std::setprecision(6) << d - df << ") us\n";
                df = d;
              }
            }

        prn: (this) = {
              df: double = ();
              for tl_
              do (in p_)
              {
                d := std::chrono::duration<double, std::nano>(p_.second - t0_).count();
                std::cout << std::setw(8) << std::setprecision(16) << p_.first << " : (";
                std::cout << std::setw(8) << std::setprecision(16) << d - df << ") ns\n";
                df = d;
              }
            }
       }

timer3: @struct type = {
        t0_: std::chrono::time_point<std::chrono::high_resolution_clock> =
               std::chrono::high_resolution_clock::now();
        tl_: std::unordered_map<uint64_t,
               std::chrono::time_point<std::chrono::high_resolution_clock>> = ();

        nt: (inout this) = {
            }

        rs: (inout this, n: int) = {
              std::cout << tl_.size() << " -> ";
              tl_.reserve(n);
              std::cout << tl_.size() << " :\n";

              t0_ = std::chrono::high_resolution_clock::now();
            }

        st: (inout this, l: uint64_t) = {
              tl_.insert(std::make_pair(l, std::chrono::high_resolution_clock::now()));
            }

        pr: (this) = {
              pru();
            }

        pru: (this) = {
              df: double = ();
              for tl_
              do (in p_)
              {
                d := std::chrono::duration<double, std::micro>(p_.second - t0_).count();
                std::cout << std::setw(8) << std::setprecision(6) << p_.first << " : (";
                std::cout << std::setw(8) << std::setprecision(6) << d - df << ") us\n";
                df = d;
              }
            }

        prn: (this) = {
              df: double = ();
              for tl_
              do (in p_)
              {
                d := std::chrono::duration<double, std::nano>(p_.second - t0_).count();
                std::cout << std::setw(8) << std::setprecision(16) << p_.first << " : (";
                std::cout << std::setw(8) << std::setprecision(16) << std::abs(d - df) << ") ns\n";
                df = d;
              }
            }
       }
